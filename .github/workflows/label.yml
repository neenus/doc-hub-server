# This workflow will triage pull requests and apply a label based on the
# paths that are modified in the pull request.
#
# To use this workflow, you will need to set up a .github/labeler.yml
# file with configuration.  For more information, see:
# https://github.com/actions/labeler

name: Auto Labeler

on:
  pull_request:
    types:
      - opened
      - synchronize
      - edited

jobs:
  add-labels:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Fetch all commits
        run: git fetch --prune --unshallow

      - name: Add labels based on Commitizen-style commit messages
        uses: actions/github-script@v6
        with:
          script: |
            const labelMappings = {
              'feature': ['feat'],
              'bug': ['fix'],
              'chore': ['chore'],
              'docs': ['docs'],
              'refactor': ['refactor'],
              'test': ['test'],
              'style': ['style'],
            };

            // Fetch commits from the pull request
            const { data: commits } = await github.rest.pulls.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
            });

            const labelsToAdd = new Set();

            for (const commit of commits) {
              const commitMessage = commit.commit.message;

              // Match the Commitizen-style format: <type>(<scope>): <description>
              const match = commitMessage.match(/^(\w+)\((.+?)\):/);
              if (match) {
                const [_, type] = match; // Extract the commit type (e.g., "fix", "feat")
                for (const [label, keywords] of Object.entries(labelMappings)) {
                  if (keywords.includes(type)) {
                    labelsToAdd.add(label);
                  }
                }
              }
            }

            if (labelsToAdd.size > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                labels: Array.from(labelsToAdd),
              });
            }
